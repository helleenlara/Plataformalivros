import streamlit as st
import pandas as pd
import hashlib
import os
import json
from dotenv import load_dotenv
from sqlalchemy.exc import IntegrityError
from sqlalchemy import create_engine, text
import google.generativeai as genai
from pathlib import Path
from wordcloud import WordCloud
from datetime import datetime
from gamificacao import (
    registrar_leitura,
    mostrar_status,
    verificar_conquistas,
    mostrar_conquistas,
    ranking_top,
    desafio_ativo,
    validar_desafio,
    calcular_pontos_e_nivel # Importar a fun√ß√£o para usar diretamente
)

# Configura√ß√£o da p√°gina
st.set_page_config(page_title="Plataforma LitMe", layout="wide")

# Estilo personalizado
st.markdown("""
    <style>
        .main {
            background-color: #E9E5DB !important;
        }
        .st-emotion-cache-uf99v8.e1g8pov61 {
            background-color: #E9E5DB !important;
        }
        body {
            background-color: #E9E5DB !important;
        }

        h1, h2, h3 {
            color: #1C5F5A;
        }
        .stButton>button {
            color: white;
            background-color: #1C5F5A;
            border-radius: 8px;
            padding: 10px 20px;
            font-size: 16px;
            margin-top: 15px;
            cursor: pointer;
        }
        .main .block-container {
            padding-left: 2rem;
            padding-right: 2rem;
            padding-top: 1rem;
            padding-bottom: 1rem;
        }
        .stTabs [data-testid="stTab"] {
            font-size: 18px;
            font-weight: bold;
            color: #1C5F5A;
        }
        .stTabs [data-testid="stTab"][aria-selected="true"] {
            border-bottom-color: #1C5F5A;
            color: #1C5F5A;
        }
        section[data-testid="stSidebarV1"] {
            display: flex;
            visibility: visible;
            transform: translateX(0%);
            transition: transform 300ms ease-in-out;
             background-color: #E9E5DB;
        }
        .st-emotion-cache-1jm6g9l.e1g8pov60 {
            display: none !important;
        }
        .st-emotion-cache-zkj8ys.e1g8pov61 {
            display: none !important;
        }
        .st-emotion-cache-uf99v8.e1g8pov61 {
            padding-right: 1rem;
            padding-left: 1rem;
        }
        .stTextInput, .stSelectbox, .stRadio, .stMultiSelect {
            max-width: 600px;
            margin-left: auto;
            margin-right: auto;
        }
        div.stButton {
            display: flex;
            justify-content: center;
        }
        .element-container .stMarkdown, .element-container .stAlert {
            text-align: center;
            width: 100%;
            margin-left: auto;
            margin-right: auto;
        }
        h1.css-10trblm.e16nr0p30 {
            text-align: center;
            width: 100%;
        }

        .justified-text {
            text-align: justify;
        }

        .highlight-container {
            border: 2px solid #1C5F5A;
            border-radius: 10px;
            padding: 20px;
            margin: 20px auto;
            background-color: #F8F5EE;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            max-width: 600px;
            text-align: center;
        }
        .highlight-container .stButton button {
            background-color: #28a745;
            color: white;
            font-weight: bold;
            border: 2px solid #218838;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
            transform: scale(1.05);
            transition: all 0.2s ease-in-out;
            width: 80%;
            max-width: 300px;
        }
        .highlight-container .stButton button:hover {
            background-color: #218838;
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.3);
            transform: scale(1.07);
        }
    </style>
""", unsafe_allow_html=True)

# Carregar vari√°veis de ambiente
dotenv_path = Path(__file__).resolve().parent / ".env"
load_dotenv(dotenv_path)

DATABASE_URL = os.getenv("DATABASE_URL")
gemini_api_key = os.getenv("GEMINI_API_KEY")

if DATABASE_URL is None:
    raise ValueError("A vari√°vel DATABASE_URL n√£o foi encontrada.")
if gemini_api_key is None:
    raise ValueError("A vari√°vel GEMINI_API_KEY n√£o foi encontrada.")

engine = create_engine(DATABASE_URL, connect_args={"connect_timeout": 10})

# Fun√ß√µes auxiliares
def hash_password(password):
    return hashlib.sha256(password.encode()).hexdigest()

def verificar_ou_criar_tabela_usuarios():
    with engine.begin() as conn:
        conn.execute(text("""
            CREATE TABLE IF NOT EXISTS usuarios (
                username TEXT PRIMARY KEY,
                nome TEXT,
                senha_hash TEXT
            );
        """))

def cadastrar_usuario(username, nome, senha):
    senha_hash = hash_password(senha)
    with engine.begin() as conn:
        conn.execute(text("""
            INSERT INTO usuarios (username, nome, senha_hash)
            VALUES (:username, :nome, :senha_hash)
        """), {"username": username, "nome": nome, "senha_hash": senha_hash})

def autenticar_usuario(username, senha):
    senha_hash = hash_password(senha)
    with engine.connect() as conn:
        return conn.execute(text("""
            SELECT username, nome FROM usuarios
            WHERE username = :username AND senha_hash = :senha_hash
        """), {"username": username, "senha_hash": senha_hash}).fetchone()

def salvar_resposta(usuario, dados_dict, perfil_gerado):
    with engine.begin() as conn:
        conn.execute(text("""
            CREATE TABLE IF NOT EXISTS respostas_formulario (
                usuario TEXT PRIMARY KEY,
                dados TEXT,
                perfil_gerado TEXT
            );
        """))
        conn.execute(text("""
            INSERT INTO respostas_formulario (usuario, dados, perfil_gerado)
            VALUES (:usuario, :dados, :perfil)
            ON CONFLICT (usuario) DO UPDATE
            SET dados = :dados, perfil_gerado = :perfil
        """), {
            "usuario": usuario,
            "dados": dados_dict if isinstance(dados_dict, str) else json.dumps(dados_dict),
            "perfil": perfil_gerado
        })

def buscar_resposta_existente(usuario):
    with engine.connect() as conn:
        return conn.execute(text("""
            SELECT dados, perfil_gerado FROM respostas_formulario
            WHERE usuario = :usuario
        """), {"usuario": usuario}).fetchone()

def carregar_dados():
    try:
        with engine.connect() as conn:
            df = pd.read_sql("SELECT * FROM respostas_formulario", conn)
            if "dados" in df.columns:
                df["dados"] = df["dados"].apply(lambda x: json.dumps(x) if isinstance(x, dict) else x)
                dados_dicts = df["dados"].apply(json.loads).apply(pd.Series)
                df = pd.concat([df.drop(columns=["dados"]), dados_dicts], axis=1)
            return df
    except Exception as e:
        st.error(f"‚ùå Erro ao carregar os dados do banco: {e}")
        return pd.DataFrame()

# Painel do Escritor Conte√∫do
def painel_escritor_conteudo():
    st.header("‚úçÔ∏è Painel do Escritor")
    st.markdown("""
    <div class="justified-text">
    Este painel utiliza conceitos de **Big Data em Python** para fornecer insights √∫teis a escritores,
    baseando-se nas prefer√™ncias reais dos leitores coletadas pela plataforma.
    </div>
    """, unsafe_allow_html=True)

    try:
        df = carregar_dados()
        if df.empty:
            st.warning("Ainda n√£o h√° dados suficientes para an√°lise.")
            st.info("Convide mais leitores para preencherem o formul√°rio de prefer√™ncias para que a an√°lise de dados seja mais rica!")
            return
    except Exception as e:
        st.error(f"‚ùå Erro ao carregar os dados: {e}")
        return

    faixa_etaria_opcao = st.selectbox("Filtrar por faixa et√°ria:", ["Todas"] + sorted(df["idade"].dropna().unique().tolist()))
    if faixa_etaria_opcao != "Todas":
        df = df[df["idade"] == faixa_etaria_opcao]

    st.subheader("üìä An√°lise Estat√≠stica dos Leitores")
    col1, col2 = st.columns(2)
    with col1:
        if "formato_livro" in df.columns:
            st.markdown("### Formato de Leitura Preferido")
            st.bar_chart(df["formato_livro"].value_counts())

    with col2:
        if "generos" in df.columns:
            generos_series = df["generos"].str.split(", ").explode()
            st.markdown("### G√™neros Liter√°rios Mais Citados")
            st.bar_chart(generos_series.value_counts())

    col3, col4 = st.columns(2)
    with col3:
        if "objetivo_leitura" in df.columns:
            st.markdown("### Objetivo de Leitura")
            st.bar_chart(df["objetivo_leitura"].value_counts())

    with col4:
        if "sentimento_livro" in df.columns:
            st.markdown("### Sentimentos Desejados")
            st.bar_chart(df["sentimento_livro"].value_counts())

    csv = df.to_csv(index=False).encode("utf-8")
    st.download_button("‚¨áÔ∏è Baixar dados filtrados (.csv)", data=csv, file_name="dados_filtrados.csv", mime="text/csv")

    st.header("üí° Sugest√µes para Escrita com IA")

    try:
        genai.configure(api_key=gemini_api_key)
        model = genai.GenerativeModel("gemini-2.0-flash")
        chat = model.start_chat()

        textos = " ".join(df["perfil_gerado"].dropna()).lower().strip()

        if not textos:
            st.warning("‚ö†Ô∏è N√£o h√° perfis suficientes para an√°lise para a IA.")
            return

        data_atual = datetime.now().strftime("%B de %Y")

        if faixa_etaria_opcao == "Todas":
            prompt = (
                f"Hoje √© {data_atual}. Voc√™ √© um consultor liter√°rio com acesso a perfis reais de leitores brasileiros.\n\n"
                "Seu objetivo √© ajudar escritores a adaptar seus textos para alcan√ßar o p√∫blico com mais impacto.\n"
                "Analise os perfis abaixo e identifique:\n\n"
                "1. Temas e assuntos mais valorizados pelos leitores.\n"
                "2. Estilos narrativos preferidos (ex: introspectivo, emocionante, com reviravoltas, etc).\n"
                "3. Emo√ß√µes ou sensa√ß√µes que o p√∫blico busca nos livros.\n"
                "4. Padr√µes de interesse e prefer√™ncias recorrentes.\n\n"
                "**Com base nisso, gere recomenda√ß√µes pr√°ticas para escritores**, como por exemplo:\n"
                "- Que tipo de enredo desenvolver\n"
                "- Que tipo de linguagem utilizar\n"
                "- Que tipos de personagens criar\n"
                "- Como conectar emocionalmente com esse p√∫blico\n\n"
                "**Apenas forne√ßa as recomenda√ß√µes. N√£o fa√ßa perguntas nem continue a conversa.**\n\n"
                f"Aqui est√£o os perfis dos leitores:\n{textos}"
            )
        else:
            prompt = (
                f"Hoje √© {data_atual}. Voc√™ √© um consultor liter√°rio com acesso a perfis reais de leitores brasileiros da faixa et√°ria: {faixa_etaria_opcao}.\n\n"
                "Seu objetivo √© ajudar escritores a adaptar seus textos para alcan√ßar esse p√∫blico com mais impacto.\n"
                "Analise os perfis abaixo e identifique:\n\n"
                "1. Temas e assuntos mais valorizados pelos leitores dessa faixa et√°ria.\n"
                "2. Estilos narrativos preferidos.\n"
                "3. Emo√ß√µes ou sensa√ß√µes desejadas.\n"
                "4. Padr√µes de interesse e prefer√™ncias espec√≠ficas dessa faixa.\n\n"
                "**Com base nisso, gere recomenda√ß√µes pr√°ticas para escritores**, como:\n"
                "- Enredos sugeridos\n"
                "- Estilo de escrita\n"
                "- Gatilhos emocionais\n"
                "- G√™neros ideais para esse p√∫blico\n\n"
                "**Apenas forne√ßa as recomenda√ß√µes. N√£o fa√ßa perguntas nem continue a conversa.**\n\n"
                f"Aqui est√£o os perfis dos leitores:\n{textos}"
            )

        response = chat.send_message(prompt.strip())
        st.markdown("### üí° An√°lise Gerada pela IA")
        st.markdown(f'<div class="justified-text">{response.text}</div>', unsafe_allow_html=True)
        st.download_button("‚¨áÔ∏è Baixar An√°lise", data=response.text, file_name="analise_ia.txt")

    except Exception as e:
        st.warning(f"‚ùå Erro na an√°lise com IA: {e}")

# L√≥gica Principal da Aplica√ß√£o
verificar_ou_criar_tabela_usuarios()

if "current_page" not in st.session_state:
    st.session_state.current_page = "login"

if "logged_user" not in st.session_state and st.session_state.current_page == "login":
    col_left_login, col_center_login, col_right_login = st.columns([1, 2, 1])

    with col_center_login:
        col1, col2, col3 = st.columns([1, 2, 1])
        with col2:
            st.image("static/litme logo wo bg.png", width=250)

        st.title("Bem-vindo(a) √† Plataforma LitMe!")
        st.info("Sua jornada liter√°ria come√ßa aqui. Fa√ßa login ou cadastre-se, ou explore o Painel do Escritor como visitante.")

        aba_login, aba_cadastro, aba_visitante = st.tabs(["üîê Login", "üìù Cadastrar", "‚úçÔ∏è Painel do Escritor (Visitante)"])

        with aba_login:
            st.subheader("Acesse sua Conta")
            login_user = st.text_input("Nome de Usu√°rio", key="login_user_main")
            login_pass = st.text_input("Senha", type="password", key="login_pass_main")
            if st.button("Entrar", key="btn_login_main"):
                user = autenticar_usuario(login_user, login_pass)
                if user:
                    st.session_state.logged_user = user.username
                    st.session_state.logged_name = user.nome
                    st.session_state.current_page = "leitor"
                    st.success(f"Bem-vindo(a), {user.nome}! Redirecionando...")
                    st.rerun()
                else:
                    st.error("Usu√°rio ou senha incorretos.")

        with aba_cadastro:
            st.subheader("Crie sua Conta")
            new_user = st.text_input("Escolha um Nome de Usu√°rio", key="new_user_main")
            new_name = st.text_input("Seu Nome Completo", key="new_name_main")
            new_pass = st.text_input("Escolha uma Senha", type="password", key="signup_pass_main")
            if st.button("Cadastrar", key="btn_signup_main"):
                try:
                    cadastrar_usuario(new_user, new_name, new_pass)
                    st.success("Conta criada com sucesso! Agora voc√™ pode fazer login.")
                except IntegrityError:
                    st.error("Este usu√°rio j√° existe. Escolha outro nome de usu√°rio.")

        with aba_visitante:
            st.subheader("Explore o Painel do Escritor")
            st.info("Acesse insights e an√°lises de dados de leitura sem precisar criar uma conta. **Funcionalidades de grava√ß√£o ou personaliza√ß√£o n√£o estar√£o dispon√≠veis.**")

            if st.button("Acessar Painel do Escritor", key="btn_visitor_writer_panel"):
                st.session_state.current_page = "painel_escritor_visitante"
                st.rerun()

elif st.session_state.current_page == "painel_escritor_visitante" and "logged_user" not in st.session_state:
    col_left_visitor, col_center_visitor, col_right_visitor = st.columns([1, 2, 1])
    with col_center_visitor:
        col1_v, col2_v, col3_v = st.columns([1, 2, 1])
        with col2_v:
            st.image("static/litme logo wo bg.png", width=100)

        st.title("‚úçÔ∏è Painel do Escritor (Modo Visitante)")
        st.info("Voc√™ est√° visualizando o painel do escritor no modo visitante. Para ter acesso completo e outras funcionalidades, por favor, fa√ßa login ou cadastre-se.")
        if st.button("Voltar para Login", key="btn_back_to_login"):
            st.session_state.current_page = "login"
            st.rerun()
        st.markdown("---")
        painel_escritor_conteudo()
        st.markdown("---")
        st.info("Para ter acesso completo e outras funcionalidades, por favor, fa√ßa login ou cadastre-se.")
        if st.button("Ir para Login/Cadastro", key="btn_go_to_login_bottom"):
            st.session_state.current_page = "login"
            st.rerun()

else:
    with st.sidebar:
        st.image("static/logo_litme.jpg", use_container_width=True)
        st.write(f"üë§ **Bem-vindo(a):** {st.session_state.logged_name}")
        if st.button("Logout", key="btn_logout_sidebar"):
            for key in ["logged_user", "logged_name", "form_submitted", "perfil", "current_page"]:
                st.session_state.pop(key, None)
            st.session_state.current_page = "login"
            st.rerun()
        st.markdown("---")
        st.subheader("Navega√ß√£o")
        if "pagina_selecionada" not in st.session_state:
            st.session_state.pagina_selecionada = "üìñ Perfil do Leitor"

        pagina = st.radio("Escolha uma se√ß√£o:",
                            ["üìñ Perfil do Leitor", "üéÆ Gamifica√ß√£o", "‚úçÔ∏è Painel do Escritor"],
                            index=["üìñ Perfil do Leitor", "üéÆ Gamifica√ß√£o", "‚úçÔ∏è Painel do Escritor"].index(st.session_state.pagina_selecionada))
        st.session_state.pagina_selecionada = pagina

    if pagina == "üìñ Perfil do Leitor":
        st.header("üìñ Seu Perfil Liter√°rio Detalhado")
        resposta_existente = buscar_resposta_existente(st.session_state.logged_user)
        if resposta_existente and "form_submitted" not in st.session_state:
            st.session_state.form_submitted = True
            st.session_state.perfil = resposta_existente.perfil_gerado

        if "form_submitted" not in st.session_state:
            st.subheader("üìã Formul√°rio de Prefer√™ncias de Leitura")
            st.info("Por favor, preencha este formul√°rio para que possamos entender suas prefer√™ncias e gerar um perfil liter√°rio para voc√™.")

            col_left, col_form, col_right = st.columns([1, 3, 1])

            with col_form:
                # Se√ß√£o 1: Dados Demogr√°ficos e H√°bitos de Leitura
                st.subheader("Sua Leitura")
                col_idade, col_freq = st.columns(2)
                with col_idade:
                    idade = st.selectbox("Faixa et√°ria:", [""] + ["Menor de 18", "18 a 24", "25 a 34", "35 a 44", "45 a 60", "Acima de 60"], index=0)
                with col_freq:
                    frequencia_leitura = st.radio("Frequ√™ncia de leitura", [""] + ["Todos os dias", "Algumas vezes por semana", "Algumas vezes por m√™s", "Raramente"], index=0)

                col_tempo, col_local = st.columns(2)
                with col_tempo:
                    tempo_leitura = st.radio("Tempo por sess√£o", [""] + ["Menos de 30 minutos", "30 minutos a 1 hora", "1 a 2 horas", "Mais de 2 horas"], index=0)
                with col_local:
                    local_leitura = st.radio("Onde voc√™ l√™?", [""] + ["Em casa", "No transporte p√∫blico", "Em bibliotecas/caf√©s", "Outros lugares"], index=0)
                st.markdown("---") # Divis√£o aqui

                # Se√ß√£o 2: Prefer√™ncias de G√™nero e Autoria
                st.subheader("G√™neros e Autores")
                col_tipo, col_generos = st.columns(2)
                with col_tipo:
                    tipo_livro = st.radio("Prefere fic√ß√£o ou n√£o fic√ß√£o?", [""] + ["Fic√ß√£o", "N√£o fic√ß√£o", "Gosto dos dois"], index=0)
                with col_generos:
                    generos = st.multiselect("G√™neros favoritos (selecione um ou mais):", ["Fic√ß√£o cient√≠fica", "Fantasia", "Romance", "Mist√©rio/Thriller", "Terror", "Hist√≥ria", "Biografia", "Desenvolvimento pessoal", "Neg√≥cios", "Filosofia", "Outro"])
                genero_outro = st.text_input("Qual outro g√™nero?", key="genero_outro_input") if "Outro" in generos else ""

                # L√≥gica para Autor Favorito
                tem_autor_favorito = st.radio("Voc√™ tem um autor favorito?", ["", "Sim", "N√£o"], index=0, key="tem_autor_favorito")
                autor_favorito = ""
                if tem_autor_favorito == "Sim":
                    autor_favorito = st.text_input("Qual o nome do seu autor favorito?", key="qual_autor_favorito")
                st.markdown("---") # Divis√£o aqui

                # Se√ß√£o 3: Estilo e Formato de Leitura
                st.subheader("Estilo e Formato")
                col_tamanho, col_narrativa = st.columns(2)
                with col_tamanho:
                    tamanho_livro = st.radio("Tamanho preferido", [""] + ["Curtos (-200 p√°ginas)", "M√©dios (200-400 p√°ginas)", "Longos (+400 p√°ginas)", "N√£o tenho prefer√™ncia"], index=0)
                with col_narrativa:
                    narrativa = st.radio("Estilo de narrativa", [""] + ["A√ß√£o r√°pida", "Narrativa introspectiva", "Equilibrado entre os dois"], index=0)

                col_sentimento, col_sociais = st.columns(2)
                with col_sentimento:
                    sentimento_livro = st.radio("Sentimento desejado ao ler", [""] + ["Inspirado", "Reflexivo", "Empolgado", "Confort√°vel", "Assustado"], index=0)
                with col_sociais:
                    questoes_sociais = st.radio("Gosta de temas sociais?", [""] + ["Sim", "Depende do tema", "Prefiro hist√≥rias leves"], index=0)

                col_releitura, col_formato = st.columns(2)
                with col_releitura:
                    releitura = st.radio("Reler livros?", [""] + ["Sempre procuro novas leituras", "Gosto de reler", "Um pouco dos dois"], index=0)
                with col_formato:
                    formato_livro = st.radio("Formato preferido", [""] + ["F√≠sico", "Digital", "Tanto faz"], index=0)
                st.markdown("---") # Divis√£o aqui

                # Se√ß√£o 4: Influ√™ncias e Outras M√≠dias
                st.subheader("Influ√™ncias e M√≠dias")
                col_influencia, col_avaliacoes = st.columns(2)
                with col_influencia:
                    influencia = st.radio("O que mais influencia sua escolha de um livro?", [""] + ["Cr√≠ticas", "Amigos", "Premia√ß√µes", "Sinopse e capa"], index=0)
                with col_avaliacoes:
                    avaliacoes = st.radio("Import√¢ncia das avalia√ß√µes e recomenda√ß√µes", [""] + ["Sim", "Prefiro personalizadas", "Tanto faz"], index=0)

                col_audio, col_artigos = st.columns(2)
                with col_audio:
                    audiolivros = st.radio("Voc√™ ouve audiolivros?", [""] + ["Sim", "N√£o", "Depende"], index=0)
                with col_artigos:
                    interesse_artigos = st.radio("Voc√™ l√™ artigos acad√™micos ou cient√≠ficos?", [""] + ["Sim", "√Äs vezes", "N√£o"], index=0)
                area_academica = st.text_input("Em quais √°reas acad√™micas voc√™ tem interesse?", key="area_academica_input") if interesse_artigos in ["Sim", "√Äs vezes"] else ""
                st.markdown("---") # Divis√£o aqui

                # Se√ß√£o 5: Prop√≥sito e N√≠vel de Leitura
                st.subheader("Prop√≥sito e N√≠vel")
                col_objetivo, col_conteudo = st.columns(2)
                with col_objetivo:
                    objetivo_leitura = st.radio("Qual seu principal objetivo ao ler?", [""] + ["Aprender", "Relaxar", "Desenvolvimento pessoal", "Conex√£o emocional", "Outros"], index=0)
                with col_conteudo:
                    tipo_conteudo = st.radio("Qual tipo de conte√∫do voc√™ mais consome?", [""] + ["Textos longos", "Blogs", "V√≠deos", "Podcasts", "Not√≠cias"], index=0)

                col_nivel, col_velocidade = st.columns(2)
                with col_nivel:
                    nivel_leitura = st.radio("Como voc√™ descreveria seu n√≠vel de leitura?", [""] + ["Iniciante", "Intermedi√°rio", "Avan√ßado"], index=0)
                with col_velocidade:
                    velocidade = st.radio("Qual o seu ritmo de leitura?", [""] + ["R√°pido", "Moderado", "Lento"], index=0)
                st.markdown("---") # Divis√£o aqui

                # Se√ß√£o 6: Curiosidade e Cultural
                st.subheader("Curiosidade e Cultural")
                col_curiosidade, col_cultural = st.columns(2)
                with col_curiosidade:
                    curiosidade = st.radio("Voc√™ tem curiosidade por temas novos e desconhecidos?", [""] + ["Sim", "Depende", "N√£o muito"], index=0)
                with col_cultural:
                    contexto_cultural = st.radio("Voc√™ se interessa por livros de outras culturas e perspectivas?", [""] + ["Sim", "Depende", "Prefiro minha realidade"], index=0)

                col_memoria, col_ingles = st.columns(2)
                with col_memoria:
                    memoria = st.radio("Voc√™ prefere tramas mais simples ou complexas?", [""] + ["Simples", "Complexa", "Equilibrada"], index=0)
                with col_ingles:
                    leitura_em_ingles = st.radio("Voc√™ l√™ livros em ingl√™s?", [""] + ["Sim", "√Äs vezes", "N√£o"], index=0)
                st.markdown("---") # Divis√£o aqui


                if st.button("Enviar Respostas e Gerar Perfil", key="btn_submit"):
                    # Valida√ß√£o de campos obrigat√≥rios
                    required_fields = {
                        "Faixa et√°ria": idade,
                        "Frequ√™ncia de leitura": frequencia_leitura,
                        "Tempo por sess√£o": tempo_leitura,
                        "Onde voc√™ l√™": local_leitura,
                        "Prefere fic√ß√£o ou n√£o fic√ß√£o": tipo_livro,
                        "G√™neros favoritos": generos,
                        "Voc√™ tem um autor favorito": tem_autor_favorito, # Valida a resposta 'Sim' ou 'N√£o'
                        "Tamanho preferido": tamanho_livro,
                        "Estilo de narrativa": narrativa,
                        "Sentimento desejado ao ler": sentimento_livro,
                        "Gosta de temas sociais": questoes_sociais,
                        "Reler livros": releitura,
                        "Formato preferido": formato_livro,
                        "O que mais influencia sua escolha de um livro": influencia,
                        "Import√¢ncia das avalia√ß√µes e recomenda√ß√µes": avaliacoes,
                        "Voc√™ ouve audiolivros": audiolivros,
                        "Voc√™ l√™ artigos acad√™micos ou cient√≠ficos": interesse_artigos,
                        "Qual seu principal objetivo ao ler": objetivo_leitura,
                        "Qual tipo de conte√∫do voc√™ mais consome": tipo_conteudo,
                        "Como voc√™ descreveria seu n√≠vel de leitura": nivel_leitura,
                        "Qual o seu ritmo de leitura": velocidade,
                        "Voc√™ tem curiosidade por temas novos e desconhecidos": curiosidade,
                        "Voc√™ se interessa por livros de outras culturas e perspectivas": contexto_cultural,
                        "Voc√™ prefere tramas mais simples ou complexas": memoria,
                        "Voc√™ l√™ livros em ingl√™s": leitura_em_ingles,
                    }

                    missing_fields = []
                    for label, value in required_fields.items():
                        if not value or (isinstance(value, list) and not value):
                            missing_fields.append(label)

                    if tem_autor_favorito == "Sim" and not autor_favorito.strip():
                        missing_fields.append("Nome do autor favorito")
                    if interesse_artigos in ["Sim", "√Äs vezes"] and not area_academica.strip():
                        missing_fields.append("√Åreas de interesse acad√™mica")


                    if missing_fields:
                        st.error(f"Por favor, preencha as seguintes informa√ß√µes obrigat√≥rias: {', '.join(missing_fields)}")
                    else:
                        with st.spinner("Gerando seu perfil liter√°rio... Isso pode levar alguns segundos."):
                            dados = {
                                "idade": idade,
                                "frequencia_leitura": frequencia_leitura,
                                "tempo_leitura": tempo_leitura,
                                "local_leitura": local_leitura,
                                "tipo_livro": tipo_livro,
                                "generos": ", ".join(generos),
                                "genero_outro": genero_outro,
                                "autor_favorito": autor_favorito,
                                "tamanho_livro": tamanho_livro,
                                "narrativa": narrativa,
                                "sentimento_livro": sentimento_livro,
                                "questoes_sociais": questoes_sociais,
                                "releitura": releitura,
                                "formato_livro": formato_livro,
                                "influencia": influencia,
                                "avaliacoes": avaliacoes,
                                "audiolivros": audiolivros,
                                "interesse_artigos": interesse_artigos,
                                "area_academica": area_academica,
                                "objetivo_leitura": objetivo_leitura,
                                "tipo_conteudo": tipo_conteudo,
                                "nivel_leitura": nivel_leitura,
                                "velocidade": velocidade,
                                "curiosidade": curiosidade,
                                "contexto_cultural": contexto_cultural,
                                "memoria": memoria,
                                "leitura_em_ingles": leitura_em_ingles
                            }

                            genai.configure(api_key=gemini_api_key)
                            prompt = (
                                 "**Atue como um PSIC√ìLOGO LITER√ÅRIO altamente perspicaz e intuitivo.**\n"
                                "Sua miss√£o √© ir MUITO AL√âM das respostas diretas do formul√°rio abaixo. **N√£o cite, reitere, ou fa√ßa qualquer refer√™ncia expl√≠cita √†s informa√ß√µes exatas que foram fornecidas.** Ou seja, n√£o mencione a origem de nenhum dado, como 'a prefer√™ncia por', 'a recusa em', 'o interesse em', que remetam diretamente a uma resposta do formul√°rio.\n"
                                "Em vez disso, analise as entrelinhas para **TRA√áAR UM RETRATO PSICOL√ìGICO REVELADOR e SURPREENDENTE do leitor, identificando suas tend√™ncias, motiva√ß√µes e anseios subjacentes.** Seu objetivo √© apresentar insights que o pr√≥prio leitor, ao ler, dir√°: 'Uau, eu n√£o tinha percebido isso sobre mim!'.\n"
                                "Conecte os tra√ßos de forma fluida e integrada, como se estivesse descrevendo a ess√™ncia de uma personalidade complexa, e n√£o um conjunto de dados. Foque em:\n"
                                "1.  **For√ßas e Desafios Inerentes:** O que define intrinsecamente este leitor e onde pode haver pontos de crescimento.\n"
                                "2.  **Desejos N√£o Articulados:** O que o leitor busca na leitura que ele mesmo n√£o consegue expressar claramente.\n"
                                "3.  **Paradoxos e Equil√≠brios:** Onde h√° aparentemente uma contradi√ß√£o, mas na verdade revela uma caracter√≠stica √∫nica.\n"
                                "4.  **Implica√ß√µes de H√°bitos:** O que os h√°bitos de leitura (onde, quando, como) revelam sobre sua psicologia.\n\n"
                                "Apresente este 'diagn√≥stico liter√°rio' em uma narrativa √∫nica, profunda e sem clich√™s, focando na descoberta de tra√ßos que v√£o al√©m do √≥bvio.\n\n"
                                "--- # Fim do Perfil\n\n" # Linha de separa√ß√£o clara
                                "**Com base EXCLUSIVAMENTE nas tend√™ncias e motiva√ß√µes REVELADAS neste retrato psicol√≥gico (e sem repetir NENHUM dado bruto do formul√°rio, nem mesmo infer√™ncias √≥bvias que j√° estavam no formul√°rio), RECOMENDE:**\n"
                                "1.  **Livros relevantes**, com justificativas que explorem as conex√µes com as **tend√™ncias e anseios mais profundos** revelados no perfil.\n"
                                "2.  **Artigos acad√™micos apropriados**, detalhando a conex√£o com **√°reas de pesquisa que complementem ou desafiem** as motiva√ß√µes subjacentes identificadas no retrato.\n\n"
                                "**Al√©m disso, identifique uma ou duas poss√≠veis novas √°reas ou g√™neros que o leitor poderia explorar**, com base nas suas prefer√™ncias e infer√™ncias do perfil, e **sugira um ou dois t√≠tulos** que se encaixem nessa expans√£o, justificando a sugest√£o.\n\n"
                                "**Estruture a resposta claramente com o '## Perfil Liter√°rio' primeiro, seguido por '## Recomenda√ß√µes de Livros', '## Recomenda√ß√µes de Artigos Acad√™micos' e, por √∫ltimo, '## Sugest√µes de Expans√£o de Interesses'.**\n"
                                f"**Dados do Formul√°rio para An√°lise:**\n{json.dumps(dados, indent=2, ensure_ascii=False)}"
                            )                  
                            model = genai.GenerativeModel("gemini-2.0-flash")
                            chat = model.start_chat()
                            response = chat.send_message(prompt)
                            perfil = response.text

                            salvar_resposta(st.session_state.logged_user, dados, perfil)
                            st.session_state.form_submitted = True
                            st.session_state.perfil = perfil
                            st.success("üéâ Perfil gerado com sucesso!")
                            st.rerun()

        else:
            st.markdown(f'<div class="justified-text">{st.session_state.perfil}</div>', unsafe_allow_html=True)
            st.markdown("---")
            st.subheader("Gerar Novas Recomenda√ß√µes?")
            st.info("Voc√™ pode gerar novas recomenda√ß√µes com base no seu perfil atual.")

            col_left_actions, col_actions, col_right_actions = st.columns([1, 3, 1])
            with col_actions:
                if st.button("üîÑ Gerar nova recomenda√ß√£o", key="btn_nova_recomendacao"):
                    with st.spinner("Gerando nova recomenda√ß√£o..."):
                        resposta_existente = buscar_resposta_existente(st.session_state.logged_user)
                        if resposta_existente:
                            dados = resposta_existente.dados if isinstance(resposta_existente.dados, dict) else json.loads(resposta_existente.dados)
                            genai.configure(api_key=gemini_api_key)
                            prompt = (
                               "**Atue como um PSIC√ìLOGO LITER√ÅRIO altamente perspicaz e intuitivo.**\n"
                                "Sua miss√£o √© ir MUITO AL√âM das respostas diretas do formul√°rio abaixo. **N√£o cite, reitere, ou fa√ßa qualquer refer√™ncia expl√≠cita √†s informa√ß√µes exatas que foram fornecidas.** Ou seja, n√£o mencione a origem de nenhum dado, como 'a prefer√™ncia por', 'a recusa em', 'o interesse em', que remetam diretamente a uma resposta do formul√°rio.\n"
                                "Em vez disso, analise as entrelinhas para **TRA√áAR UM RETRATO PSICOL√ìGICO REVELADOR e SURPREENDENTE do leitor, identificando suas tend√™ncias, motiva√ß√µes e anseios subjacentes.** Seu objetivo √© apresentar insights que o pr√≥prio leitor, ao ler, dir√°: 'Uau, eu n√£o tinha percebido isso sobre mim!'.\n"
                                "Conecte os tra√ßos de forma fluida e integrada, como se estivesse descrevendo a ess√™ncia de uma personalidade complexa, e n√£o um conjunto de dados. Foque em:\n"
                                "1.  **For√ßas e Desafios Inerentes:** O que define intrinsecamente este leitor e onde pode haver pontos de crescimento.\n"
                                "2.  **Desejos N√£o Articulados:** O que o leitor busca na leitura que ele mesmo n√£o consegue expressar claramente.\n"
                                "3.  **Paradoxos e Equil√≠brios:** Onde h√° aparentemente uma contradi√ß√£o, mas na verdade revela uma caracter√≠stica √∫nica.\n"
                                "4.  **Implica√ß√µes de H√°bitos:** O que os h√°bitos de leitura (onde, quando, como) revelam sobre sua psicologia.\n\n"
                                "Apresente este 'diagn√≥stico liter√°rio' em uma narrativa √∫nica, profunda e sem clich√™s, focando na descoberta de tra√ßos que v√£o al√©m do √≥bvio.\n\n"
                                "--- # Fim do Perfil\n\n" # Linha de separa√ß√£o clara
                                "**Com base EXCLUSIVAMENTE nas tend√™ncias e motiva√ß√µes REVELADAS neste retrato psicol√≥gico (e sem repetir NENHUM dado bruto do formul√°rio, nem mesmo infer√™ncias √≥bvias que j√° estavam no formul√°rio), RECOMENDE:**\n"
                                "1.  **Livros relevantes**, com justificativas que explorem as conex√µes com as **tend√™ncias e anseios mais profundos** revelados no perfil.\n"
                                "2.  **Artigos acad√™micos apropriados**, detalhando a conex√£o com **√°reas de pesquisa que complementem ou desafiem** as motiva√ß√µes subjacentes identificadas no retrato.\n\n"
                                "**Al√©m disso, identifique uma ou duas poss√≠veis novas √°reas ou g√™neros que o leitor poderia explorar**, com base nas suas prefer√™ncias e infer√™ncias do perfil, e **sugira um ou dois t√≠tulos** que se encaixem nessa expans√£o, justificando a sugest√£o.\n\n"
                                "**Estruture a resposta claramente com o '## Perfil Liter√°rio' primeiro, seguido por '## Recomenda√ß√µes de Livros', '## Recomenda√ß√µes de Artigos Acad√™micos' e, por √∫ltimo, '## Sugest√µes de Expans√£o de Interesses'.**\n"
                                f"**Dados do Formul√°rio para An√°lise:**\n{json.dumps(dados, indent=2, ensure_ascii=False)}"
                            )
                            model = genai.GenerativeModel("gemini-2.0-flash")
                            chat = model.start_chat()
                            response = chat.send_message(prompt)
                            perfil = response.text

                            salvar_resposta(st.session_state.logged_user, dados, perfil)
                            st.session_state.perfil = perfil
                            st.success("‚úÖ Nova recomenda√ß√£o gerada!")
                            st.rerun()

    elif pagina == "üéÆ Gamifica√ß√£o":
        if "logged_user" in st.session_state:
            usuario = st.session_state.logged_user
            st.title("üéÆ Gamifica√ß√£o da Leitura")

            registrar_leitura(engine, usuario)

            # --- Bloco de Status do Usu√°rio em um √∫nico highlight-container ---
            st.markdown("---")
            st.subheader("üìä Seu Desempenho Atual")
            
            col1_perf, col2_perf, col3_perf = st.columns(3)
            
            with col1_perf:
                st.subheader("Pontos")
                pontos, _ = calcular_pontos_e_nivel(engine, usuario)
                st.metric(label="Total", value=pontos)
            
            with col2_perf:
                st.subheader("N√≠vel")
                _, nivel = calcular_pontos_e_nivel(engine, usuario)
                st.metric(label="Atual", value=nivel)

            # Calcular a coloca√ß√£o do usu√°rio
            with engine.connect() as conn:
                ranking_data = conn.execute(text("""
                    SELECT u.username, COALESCE(SUM(p.paginas_lidas) + COUNT(*) FILTER (WHERE p.livro_finalizado) * 50, 0) as pontos
                    FROM usuarios u
                    LEFT JOIN progresso_leitura p ON u.username = p.username
                    GROUP BY u.username
                    ORDER BY pontos DESC
                """)).fetchall()
            
            sua_colocacao = None
            for i, r in enumerate(ranking_data):
                if r.username == usuario:
                    sua_colocacao = i + 1
                    break
            
            with col3_perf:
                st.subheader("Coloca√ß√£o")
                if sua_colocacao is not None:
                    st.metric(label="No Ranking", value=f"{sua_colocacao}¬∫")
                else:
                    st.metric(label="No Ranking", value="N/A") # Ou uma mensagem indicando que n√£o est√° no ranking ainda

            st.markdown("</div>", unsafe_allow_html=True)
            # --- Fim do Bloco de Status do Usu√°rio ---
            
            st.markdown("---")
            mostrar_conquistas(engine, usuario)
            
            st.markdown("---")
            ranking_top(engine) 

            st.markdown("---")
            st.subheader("üî• Desafio da Semana")
            st.info(desafio_ativo()) # Exibe a descri√ß√£o do desafio
            
            # Valida e exibe a mensagem do desafio
            if validar_desafio(engine, usuario):
                st.success("‚úÖ Desafio conclu√≠do! Voc√™ ganhou 50 pontos b√¥nus.")
            else:
                st.warning("üìö Continue lendo para concluir o desafio!")
        else:
            st.warning("Fa√ßa login para acessar a gamifica√ß√£o.")

    elif pagina == "‚úçÔ∏è Painel do Escritor":
        col_left_writer, col_writer, col_right_writer = st.columns([1, 3, 1])
        with col_writer:
            painel_escritor_conteudo()