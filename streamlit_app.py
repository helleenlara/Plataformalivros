import streamlit as st
import pandas as pd
import hashlib
import os
from dotenv import load_dotenv
from sqlalchemy.exc import IntegrityError
from sqlalchemy import create_engine, text
from google import genai 

# Carrega vari√°veis de ambiente
dotenv_path = os.path.join(os.getcwd(), '.env')
load_dotenv(dotenv_path)

# Verifica se a vari√°vel DATABASE_URL foi carregada corretamente
DATABASE_URL = os.getenv("DATABASE_URL")
if DATABASE_URL is None:
    raise ValueError("A vari√°vel de ambiente 'DATABASE_URL' n√£o foi encontrada no arquivo .env")

# Verifica se a chave da API do Gemini foi carregada corretamente
gemini_api_key = os.getenv("GEMINI_API_KEY")
if gemini_api_key is None:
    raise ValueError("A chave da API do Gemini 'GEMINI_API_KEY' n√£o foi encontrada no arquivo .env")

# Cria√ß√£o do motor de conex√£o com o banco de dados
# engine = create_engine(DATABASE_URL)
engine = create_engine(DATABASE_URL, connect_args={"connect_timeout": 10})

# -------------------------------
# Fun√ß√µes auxiliares
# -------------------------------
def hash_password(password):
    return hashlib.sha256(password.encode()).hexdigest()

def verificar_ou_criar_tabela_usuarios():
    with engine.connect() as conn:
        conn.execute(text("""
            CREATE TABLE IF NOT EXISTS usuarios (
                username TEXT PRIMARY KEY,
                nome TEXT,
                senha_hash TEXT
            );
        """))

def cadastrar_usuario(username, nome, senha):
    senha_hash = hash_password(senha)
    with engine.connect() as conn:
        conn.execute(text("""
            INSERT INTO usuarios (username, nome, senha_hash)
            VALUES (:username, :nome, :senha_hash)
        """), {"username": username, "nome": nome, "senha_hash": senha_hash})

def autenticar_usuario(username, senha):
    senha_hash = hash_password(senha)
    with engine.connect() as conn:
        return conn.execute(text("""
            SELECT username, nome FROM usuarios
            WHERE username = :username AND senha_hash = :senha_hash
        """), {"username": username, "senha_hash": senha_hash}).fetchone()

# -------------------------------
# Setup inicial
# -------------------------------
st.set_page_config(page_title="Plataforma de Livros", layout="wide")
verificar_ou_criar_tabela_usuarios()

# -------------------------------
# Se√ß√£o de autentica√ß√£o
# -------------------------------
if "logged_user" not in st.session_state:
    st.sidebar.title("üîê Autentica√ß√£o")
    tab_login, tab_signup = st.sidebar.tabs(["Login", "Cadastrar"])
    
    with tab_login:
        st.subheader("Login")
        login_user = st.text_input("Usu√°rio", key="login_user")
        login_pass = st.text_input("Senha", type="password", key="login_pass")
        if st.button("Entrar", key="btn_login"):
            user = autenticar_usuario(login_user, login_pass)
            if user:
                st.session_state.logged_user = user.username
                st.session_state.logged_name = user.nome
                st.success(f"Bem-vindo(a), {user.nome}!")
            else:
                st.error("Usu√°rio ou senha incorretos.")
    
    with tab_signup:
        st.subheader("Cadastrar")
        new_user = st.text_input("Usu√°rio", key="new_user")
        new_name = st.text_input("Nome", key="new_name")
        new_pass = st.text_input("Senha", type="password", key="new_pass")
        if st.button("Cadastrar", key="btn_signup"):
            try:
                cadastrar_usuario(new_user, new_name, new_pass)
                st.success("Conta criada! Fa√ßa login.")
            except IntegrityError:
                st.error("Este usu√°rio j√° existe. Escolha outro.")
else:
    # -------------------------------
    # Usu√°rio j√° autenticado
    # -------------------------------
    st.sidebar.write(f"üë§ {st.session_state.logged_name}")
    if st.sidebar.button("Logout", key="btn_logout"):
        del st.session_state.logged_user
        del st.session_state.logged_name
        st.experimental_rerun()
    
    # ==== Formul√°rio de Prefer√™ncias de Leitura ====
    st.title("Formul√°rio de Prefer√™ncias de Leitura")
    
    st.header("1. Sobre seus h√°bitos de leitura")
    frequencia_leitura = st.radio("Com que frequ√™ncia voc√™ costuma ler?", ["Todos os dias", "Algumas vezes por semana", "Algumas vezes por m√™s", "Raramente"])
    tempo_leitura = st.radio("Quanto tempo voc√™ geralmente dedica √† leitura por sess√£o?", ["Menos de 30 minutos", "30 minutos a 1 hora", "1 a 2 horas", "Mais de 2 horas"])
    local_leitura = st.radio("Onde voc√™ costuma ler com mais frequ√™ncia?", ["Em casa", "No transporte p√∫blico", "Em bibliotecas/caf√©s", "Outros lugares"])

    st.header("2. Sobre suas prefer√™ncias de leitura")
    tipo_livro = st.radio("Voc√™ prefere livros de fic√ß√£o ou n√£o fic√ß√£o?", ["Fic√ß√£o", "N√£o fic√ß√£o", "Gosto dos dois"])
    generos = st.multiselect("Quais g√™neros liter√°rios voc√™ mais gosta? (Escolha at√© 3)", ["Fic√ß√£o cient√≠fica", "Fantasia", "Romance", "Mist√©rio/Thriller", "Terror", "Hist√≥ria", "Biografia", "Desenvolvimento pessoal", "Neg√≥cios", "Filosofia", "Outro"])
    genero_outro = ""
    if "Outro" in generos:
        genero_outro = st.text_input("Qual outro g√™nero?")
    autor_favorito = st.text_input("Voc√™ tem algum autor favorito?")
    tamanho_livro = st.radio("Voc√™ prefere livros curtos ou longos?", ["Curtos (-200 p√°ginas)", "M√©dios (200-400 p√°ginas)", "Longos (+400 p√°ginas)", "N√£o tenho prefer√™ncia"])
    narrativa = st.radio("Como voc√™ gosta da narrativa dos livros?", ["A√ß√£o r√°pida, cheia de acontecimentos", "Narrativa introspectiva, com profundidade emocional", "Equilibrado entre a√ß√£o e introspec√ß√£o"])

    st.header("3. Personalidade do Leitor")
    sentimento_livro = st.radio("Como voc√™ gostaria que um livro te fizesse sentir?", ["Inspirado e motivado", "Reflexivo e pensativo", "Empolgado e cheio de adrenalina", "Confort√°vel e relaxado", "Assustado e intrigado"])
    questoes_sociais = st.radio("Voc√™ gosta de livros que abordam quest√µes sociais ou filos√≥ficas?", ["Sim, adoro reflex√µes profundas", "Depende do tema", "Prefiro hist√≥rias mais leves"])
    releitura = st.radio("Voc√™ gosta de reler livros ou prefere sempre algo novo?", ["Sempre procuro novas leituras", "Gosto de reler meus favoritos", "Um pouco dos dois"])

    st.header("4. Ajustes Finais para Recomenda√ß√£o")
    formato_livro = st.radio("Voc√™ prefere livros f√≠sicos ou digitais?", ["F√≠sicos", "Digitais (Kindle, PDF, etc.)", "Tanto faz"])
    influencia = st.radio("O que mais influencia voc√™ na escolha de um livro?", ["Cr√≠ticas e resenhas", "Recomenda√ß√µes de amigos", "Premia√ß√µes e best-sellers", "Sinopse e capa"])
    avaliacoes = st.radio("Gostaria de receber recomenda√ß√µes baseadas em avalia√ß√µes de outros leitores?", ["Sim, me mostre os mais bem avaliados", "Prefiro descobertas personalizadas", "Tanto faz"])
    audiolivros = st.radio("Voc√™ tem interesse em audiolivros?", ["Sim, gosto de ouvir livros", "N√£o, prefiro ler", "Depende do livro"])

    st.header("5. Interesse em Artigos Acad√™micos")
    interesse_artigos = st.radio("Voc√™ tem interesse em artigos acad√™micos ou t√©cnicos?", ["Sim, leio frequentemente", "Leio quando necess√°rio", "N√£o tenho interesse"])
    area_academica = ""
    if interesse_artigos != "N√£o tenho interesse":
        area_academica = st.text_input("Se sim, quais √°reas ou temas voc√™ mais se interessa?")

    st.header("6. Perfil Cognitivo e de Leitura")
    objetivo_leitura = st.radio("Qual √© o seu principal objetivo ao ler?", ["Aprender algo novo", "Se entreter e relaxar", "Desenvolvimento pessoal ou profissional", "Conectar-se emocionalmente com hist√≥rias", "Outros"])
    tipo_conteudo = st.radio("Que tipo de conte√∫do voc√™ mais consome no dia a dia?", ["Livros e textos longos", "Artigos e blogs curtos", "V√≠deos no YouTube/TikTok", "Podcasts e audiobooks", "Not√≠cias e mat√©rias jornal√≠sticas"])
    nivel_leitura = st.radio("Como voc√™ classificaria seu n√≠vel de leitura?", ["Iniciante ‚Äì leio pouco ou estou come√ßando", "Intermedi√°rio ‚Äì leio com frequ√™ncia moderada", "Avan√ßado ‚Äì leio com frequ√™ncia e gosto de desafios"])
    velocidade = st.radio("Voc√™ costuma ler em um ritmo...", ["R√°pido ‚Äì gosto de terminar logo", "Moderado ‚Äì acompanho no meu tempo", "Lento ‚Äì gosto de refletir e analisar"])
    curiosidade = st.radio("Voc√™ se considera uma pessoa curiosa sobre temas variados?", ["Sim, adoro explorar assuntos novos", "Depende do assunto", "N√£o muito, gosto de coisas familiares"])
    contexto_cultural = st.radio("Voc√™ gosta de livros ambientados em outras culturas, pa√≠ses ou √©pocas?", ["Sim, isso me interessa muito", "Depende do contexto", "Prefiro hist√≥rias que se pare√ßam com minha realidade"])
    memoria = st.radio("Voc√™ prefere livros com...", ["Tramas simples e f√°ceis de acompanhar", "Hist√≥rias complexas, com m√∫ltiplos personagens e tempos", "Um equil√≠brio entre os dois"])
    leitura_em_ingles = st.radio("Voc√™ l√™ livros ou artigos em ingl√™s?", ["Sim, frequentemente", "√Äs vezes, quando necess√°rio", "N√£o, prefiro conte√∫dos em portugu√™s"])

    if st.button("Enviar Respostas", key="btn_submit"):
        # Coleta dos dados do formul√°rio
        dados = {
            "usuario": st.session_state.logged_user,
            "frequencia_leitura": frequencia_leitura,
            "tempo_leitura": tempo_leitura,
            "local_leitura": local_leitura,
            "tipo_livro": tipo_livro,
            "generos": ", ".join(generos),
            "genero_outro": genero_outro,
            "autor_favorito": autor_favorito,
            "tamanho_livro": tamanho_livro,
            "narrativa": narrativa,
            "sentimento_livro": sentimento_livro,
            "questoes_sociais": questoes_sociais,
            "releitura": releitura,
            "formato_livro": formato_livro,
            "influencia": influencia,
            "avaliacoes": avaliacoes,
            "audiolivros": audiolivros,
            "interesse_artigos": interesse_artigos,
            "area_academica": area_academica,
            "objetivo_leitura": objetivo_leitura,
            "tipo_conteudo": tipo_conteudo,
            "nivel_leitura": nivel_leitura,
            "velocidade": velocidade,
            "curiosidade": curiosidade,
            "contexto_cultural": contexto_cultural,
            "memoria": memoria,
            "leitura_em_ingles": leitura_em_ingles
        }
        # Armazena no banco de dados
        df = pd.DataFrame([dados])
        df.to_sql("respostas_formulario", engine, if_exists="append", index=False)
        st.success("Formul√°rio enviado com sucesso! ‚úÖ")

        # Integra√ß√£o com Gemini para gerar perfil narrativo
        prompt = f"""
            Voc√™ √© um especialista em an√°lise de perfil de leitura. Com base nas seguintes prefer√™ncias de leitura, gere um perfil narrativo detalhado, descrevendo o estilo de leitura, motiva√ß√µes, pontos fortes e sugest√µes personalizadas para o usu√°rio:

            - Frequ√™ncia de Leitura: {frequencia_leitura}
            - Tempo de Leitura por Sess√£o: {tempo_leitura}
            - Local de Leitura: {local_leitura}
            - Tipo de Livro Preferido: {tipo_livro}
            - G√™neros Liter√°rios: {', '.join(generos) if generos else 'Nenhum g√™nero especificado'}
            - Autor Favorito: {autor_favorito if autor_favorito else 'N√£o especificado'}
            - Tamanho de Livro Preferido: {tamanho_livro}
            - Tipo de Narrativa: {narrativa}
            - Sentimento Desejado com a Leitura: {sentimento_livro}
            - Interesse por Quest√µes Sociais/Filos√≥ficas: {questoes_sociais}
            - Prefere Rel√™r Livros? {releitura}
            - Formato de Livro: {formato_livro}
            - Influ√™ncia nas Escolhas de Leitura: {influencia}
            - Interesse por Avalia√ß√µes: {avaliacoes}
            - Interesse por Audiolivros: {audiolivros}
            - Interesse por Artigos Acad√™micos: {interesse_artigos}
            - √Årea Acad√™mica de Interesse: {area_academica if area_academica else 'N√£o especificado'}
            - Objetivo Principal ao Ler: {objetivo_leitura}
            - Tipo de Conte√∫do Consumido no Dia a Dia: {tipo_conteudo}
            - N√≠vel de Leitura: {nivel_leitura}
            - Ritmo de Leitura: {velocidade}
            - Curiosidade sobre Temas: {curiosidade}
            - Interesse por Culturas Diversas: {contexto_cultural}
            - Tipo de Hist√≥ria Preferida: {memoria}
            - Leitura em Ingl√™s: {leitura_em_ingles}
        """

        # Envio para Gemini usando o novo cliente
        try:
            client = genai.Client(api_key=gemini_api_key)
            response = client.models.generate_content(
                model="gemini-2.0-flash",  # Modelo escolhido
                contents=prompt
            )
            perfil = response.text
        except Exception as e:
            st.error(f"Erro ao gerar perfil de leitura: {e}")
            perfil = None

        if perfil:
            st.header("üìñ Seu Perfil de Leitura")
            st.write(perfil)
        else:
            st.error("N√£o foi poss√≠vel gerar seu perfil de leitura.")